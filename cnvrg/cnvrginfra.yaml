apiVersion: v1
items:
- apiVersion: mlops.cnvrg.io/v1
  kind: CnvrgInfra
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"mlops.cnvrg.io/v1","kind":"CnvrgInfra","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"cnvrg"},"name":"cnvrg-infra"},"spec":{"annotations":{},"capsule":{"enabled":false,"image":"cnvrg-capsule:1.0.2"},"clusterDomain":"aws.dilerous.cloud","clusterInternalDomain":"cluster.local","configReloader":{"enabled":true},"cri":"","dbs":{"redis":{"enabled":true,"storageClass":"","storageSize":"10Gi"}},"gpu":{"habanaDp":{"enabled":true},"nvidiaDp":{"enabled":true}},"imageHub":"docker.io/cnvrg","infraNamespace":"cnvrg","labels":{},"logging":{"fluentbit":{"enabled":true}},"monitoring":{"cnvrgIdleMetricsExporter":{"enabled":true,"labels":{"cnvrg-infra-prometheus":"cnvrg-infra-cnvrg"}},"dcgmExporter":{"enabled":true},"defaultServiceMonitors":{"enabled":true},"grafana":{"enabled":true,"svcName":"grafana"},"habanaExporter":{"enabled":true},"kubeStateMetrics":{"enabled":true},"nodeExporter":{"enabled":true},"prometheus":{"credsRef":"prom-creds","enabled":true,"retention":"8w","storageClass":"","storageSize":"50Gi"},"prometheusOperator":{"enabled":true}},"networking":{"eastWest":{"clusterName":null,"enabled":false,"meshId":"mesh1","network":"network1","primary":false},"https":{"certSecret":"","enabled":false},"ingress":{"type":"ingress"},"proxy":{"enabled":false}},"registry":{"password":"abbb7835-fef8-42af-be0f-ef6750bde5a0","url":"docker.io","user":"cnvrghelm"},"sso":{"adminUser":"","azureTenant":"","clientId":"","clientSecret":"","cookieSecret":"c7DiYKpQYyAGpSqp","enabled":false,"oidcIssuerUrl":"","provider":""},"storage":{"hostpath":{"defaultSc":false,"enabled":false,"image":"","path":"/cnvrg-hostpath-storage","reclaimPolicy":"Retain"},"nfs":{"defaultSc":false,"enabled":false,"image":"","path":"","reclaimPolicy":"Retain","server":""}},"tenancy":{"enabled":false,"key":"purpose","value":"cnvrg-control-plane"}}}
    creationTimestamp: "2023-06-19T20:44:32Z"
    finalizers:
    - cnvrginfra.mlops.cnvrg.io/finalizer
    generation: 2
    labels:
      app.kubernetes.io/instance: cnvrg
    name: cnvrg-infra
    resourceVersion: "7474273"
    uid: 100354b2-d710-498e-8fc1-5f9302c6f83b
  spec:
    capsule:
      image: cnvrg-capsule:1.0.2
      limits:
        cpu: "1"
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 500Mi
      storageSize: 100Gi
      svcName: capsule
    clusterDomain: aws.dilerous.cloud
    clusterInternalDomain: cluster.local
    cnvrgAppPriorityClass:
      description: cnvrg control plane apps priority class
      name: cnvrg-apps
      value: 2000000
    cnvrgJobPriorityClass:
      description: cnvrg jobs priority class
      name: cnvrg-jobs
      value: 1000000
    configReloader:
      enabled: true
      image: config-reloader:latest
    cri: docker
    dbs:
      redis:
        backup: {}
        credsRef: redis-creds
        enabled: true
        image: cnvrg-redis:v3.0.5.c2
        limits:
          cpu: 1000m
          memory: 2Gi
        port: 6379
        pvcName: redis-storage
        requests:
          cpu: 100m
          memory: 200Mi
        serviceAccount: redis
        storageSize: 10Gi
        svcName: redis
    gpu:
      habanaDp:
        enabled: true
        image: vault.habana.ai/docker-k8s-device-plugin/docker-k8s-device-plugin:latest
      metaGpuDp:
        image: metagpu-device-plugin:main
      nvidiaDp:
        enabled: true
        image: k8s-device-plugin:v0.9.0
    imageHub: docker.io/cnvrg
    infraNamespace: cnvrg
    labels:
      owner: cnvrg-control-plane
    logging:
      fluentbit:
        enabled: true
        image: cnvrg-fluentbit:v1.7.3
        limits:
          cpu: 2000m
          memory: 2Gi
        logsMounts:
          varlibdockercontainers: /var/lib/docker/containers
          varlog: /var/log
        requests:
          cpu: 50m
          memory: 200Mi
    monitoring:
      cnvrgIdleMetricsExporter:
        enabled: true
        labels:
          cnvrg-infra-prometheus: cnvrg-infra-cnvrg
      dcgmExporter:
        enabled: true
        image: nvcr.io/nvidia/k8s/dcgm-exporter:2.0.13-2.1.2-ubuntu20.04
      defaultServiceMonitors:
        enabled: true
      grafana:
        credsRef: grafana-creds
        enabled: true
        image: grafana:7.3.4
        nodePort: 30012
        oauthProxy:
          skipAuthRegex:
          - \/api\/health
        port: 8080
        svcName: grafana
      habanaExporter:
        enabled: true
        hlmlImage: vault.habana.ai/gaudi-metric-exporter/hlml-service:latest
        image: vault.habana.ai/gaudi-metric-exporter/metric-exporter:latest
      kubeStateMetrics:
        enabled: true
        image: kube-state-metrics:v1.9.7
      nodeExporter:
        enabled: true
        image: node-exporter:v1.0.1
      prometheus:
        basicAuthProxyImage: nginx:1.20
        credsRef: prom-creds
        enabled: true
        image: prometheus:v2.22.1
        limits:
          cpu: "4"
          memory: 12Gi
        nodePort: 30910
        port: 9091
        replicas: 1
        requests:
          cpu: 200m
          memory: 500Mi
        retention: 8w
        storageSize: 50Gi
        svcName: prometheus
        upstreamRef: upstream-prom-static-config
      prometheusOperator:
        enabled: true
        kubeRbacProxyImage: kube-rbac-proxy:v0.8.0
        operatorImage: prometheus-operator:v0.44.1
        prometheusConfigReloaderImage: prometheus-config-reloader:v0.44.1
    networking:
      eastWest:
        meshId: mesh1
        network: network1
      https: {}
      ingress:
        istioGwName: istio-gw-cnvrg
        perTryTimeout: 3600s
        retriesAttempts: 5
        timeout: 18000s
        type: ingress
      istio:
        operatorImage: istio-operator:1.13.5
        pilotImage: pilot:1.13.5
      proxy:
        configRef: infra-proxy
    registry:
      name: cnvrg-infra-registry
      password: abbb7835-fef8-42af-be0f-ef6750bde5a0
      url: docker.io
      user: cnvrghelm
    sso:
      cookieSecret: c7DiYKpQYyAGpSqp
      image: saas-oauth2-proxy:latest
    storage:
      hostpath:
        image: hostpath-provisioner:latest
        limits:
          cpu: 200m
          memory: 200Mi
        path: /cnvrg-hostpath-storage
        reclaimPolicy: Retain
        requests:
          cpu: 100m
          memory: 100Mi
        storageClassName: cnvrg-hostpath-storage
      nfs:
        image: nfs-subdir-external-provisioner:v4.0.0
        limits:
          cpu: 200m
          memory: 200Mi
        provisioner: cnvrg.io/ifs
        reclaimPolicy: Retain
        requests:
          cpu: 100m
          memory: 100Mi
        storageClassName: cnvrg-nfs-storage
    tenancy:
      key: purpose
      value: cnvrg-control-plane
  status:
    message: successfully reconciled
    status: HEALTHY
kind: List
metadata:
  resourceVersion: ""
