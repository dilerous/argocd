apiVersion: v1
items:
- apiVersion: mlops.cnvrg.io/v1
  kind: CnvrgApp
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"mlops.cnvrg.io/v1","kind":"CnvrgApp","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"cnvrg"},"name":"cnvrg-app","namespace":"cnvrg"},"spec":{"annotations":{},"clusterDomain":"aws.dilerous.cloud","clusterInternalDomain":"cluster.local","controlPlane":{"baseConfig":{"agentCustomTag":"latest","cnvrgPrivilegedJob":true,"featureFlags":{"CNVRG_ENABLE_MOUNT_FOLDERS":"true","CNVRG_MOUNT_HOST_FOLDERS":"false"},"intercom":"true"},"cnvrgClusterProvisionerOperator":{"enabled":false},"cnvrgRouter":{"enabled":false,"image":"nginx:1.21.0"},"cnvrgScheduler":{"enabled":true},"hyper":{"enabled":true},"image":"cnvrg/app:v4.7.95","ldap":{"account":"userPrincipalName","adminPassword":"","adminUser":"","base":"","enabled":false,"host":"","port":"","ssl":"false"},"mpi":{"enabled":true,"extraArgs":{},"image":"mpioperator/mpi-operator:v0.2.3","kubectlDeliveryImage":"mpioperator/kubectl-delivery:v0.2.3","registry":{"password":"","url":"docker.io","user":""}},"objectStorage":{"accessKey":"","azureAccountName":"","azureContainer":"","bucket":"cnvrg-storage","endpoint":"","gcpProject":"","gcpSecretRef":"gcp-storage-secret","region":"eastus","secretKey":"","type":"minio"},"searchkiq":{"enabled":true,"hpa":{"enabled":true,"maxReplicas":5}},"sidekiq":{"enabled":true,"hpa":{"enabled":true,"maxReplicas":5},"split":true},"smtp":{"domain":"","opensslVerifyMode":"","password":"","port":587,"sender":"info@cnvrg.io","server":"","username":""},"systemkiq":{"enabled":true,"hpa":{"enabled":true,"maxReplicas":5}},"webapp":{"enabled":true,"hpa":{"enabled":true,"maxReplicas":5},"replicas":1,"svcName":"app"}},"cri":"","dbs":{"cvat":{"enabled":false,"pg":{"enabled":false},"redis":{"enabled":false}},"es":{"cleanupPolicy":{"all":"3d","app":"30d","endpoints":"1825d","jobs":"14d"},"enabled":true,"patchEsNodes":true,"replicas":1,"storageClass":"","storageSize":"10Gi"},"minio":{"enabled":true,"storageClass":"","storageSize":"20Gi"},"pg":{"backup":{"enabled":true,"period":"24h","rotation":5},"enabled":true,"hugePages":{"enabled":false,"memory":"","size":"2Mi"},"storageClass":"","storageSize":"20Gi"}},"imageHub":"docker.io/cnvrg","labels":{},"logging":{"elastalert":{"enabled":false,"storageClass":"","storageSize":"30Gi"},"kibana":{"enabled":true,"svcName":"kibana"}},"networking":{"eastWest":{"clusterName":null,"enabled":false,"meshId":"mesh1","network":"network1","primary":false},"https":{"certSecret":"","enabled":false},"ingress":{"type":"ingress"},"proxy":{"enabled":false}},"registry":{"password":"abbb7835-fef8-42af-be0f-ef6750bde5a0","url":"docker.io","user":"cnvrghelm"},"sso":{"adminUser":"","azureTenant":"","clientId":"","clientSecret":"","cookieSecret":"Tk6hlOCFkCJ561jV","enabled":false,"oidcIssuerUrl":"","provider":""},"tenancy":{"enabled":false,"key":"purpose","value":"cnvrg-control-plane"}}}
    creationTimestamp: "2023-06-19T20:44:32Z"
    finalizers:
    - cnvrgapp.mlops.cnvrg.io/finalizer
    generation: 3
    labels:
      app.kubernetes.io/instance: cnvrg
    name: cnvrg-app
    namespace: cnvrg
    resourceVersion: "7475615"
    uid: 72b3db47-e55f-4424-965a-7a0bcce51efa
  spec:
    clusterDomain: aws.dilerous.cloud
    clusterInternalDomain: cluster.local
    cnvrgAppPriorityClass:
      description: cnvrg control plane apps priority class
      name: cnvrg-apps
      value: 2000000
    cnvrgJobPriorityClass:
      description: cnvrg jobs priority class
      name: cnvrg-jobs
      value: 1000000
    controlPlane:
      baseConfig:
        agentCustomTag: latest
        cnvrgJobUid: "1000"
        cnvrgPrivilegedJob: true
        featureFlags:
          CNVRG_ENABLE_MOUNT_FOLDERS: "true"
          CNVRG_MOUNT_HOST_FOLDERS: "false"
        intercom: "true"
      cnvrgClusterProvisionerOperator:
        image: cnvrg/ccp-operator:v1
        limits:
          cpu: "2"
          memory: 4Gi
        requests:
          cpu: 200m
          memory: 1Gi
      cnvrgRouter:
        image: nginx:1.21.0
        nodePort: 30081
        svcName: cnvrg-router
      cnvrgScheduler:
        enabled: true
        limits:
          cpu: "2"
          memory: 4Gi
        replicas: 1
        requests:
          cpu: 200m
          memory: 1000Mi
      hyper:
        enabled: true
        image: hyper-server:latest
        limits:
          cpu: "2"
          memory: 4Gi
        nodePort: 30050
        port: 5050
        readinessPeriodSeconds: 100
        readinessTimeoutSeconds: 60
        replicas: 1
        requests:
          cpu: 100m
          memory: 200Mi
        svcName: hyper
        token: token
      image: cnvrg/app:v4.7.95
      ldap:
        account: userPrincipalName
        ssl: "false"
      mpi:
        enabled: true
        image: mpioperator/mpi-operator:v0.2.3
        kubectlDeliveryImage: mpioperator/kubectl-delivery:v0.2.3
        limits:
          cpu: 1000m
          memory: 1Gi
        registry:
          name: mpi-private-registry
          url: docker.io
        requests:
          cpu: 100m
          memory: 100Mi
      objectStorage:
        bucket: cnvrg-storage
        gcpSecretRef: gcp-storage-secret
        region: eastus
        type: minio
      searchkiq:
        enabled: true
        hpa:
          enabled: true
          maxReplicas: 5
          utilization: 85
        limits:
          cpu: "2"
          memory: 8Gi
        replicas: 1
        requests:
          cpu: 200m
          memory: 1Gi
      sidekiq:
        enabled: true
        hpa:
          enabled: true
          maxReplicas: 5
          utilization: 85
        limits:
          cpu: "2"
          memory: 8Gi
        replicas: 2
        requests:
          cpu: 200m
          memory: 3750Mi
        split: true
      smtp:
        port: 587
        sender: info@cnvrg.io
      systemkiq:
        enabled: true
        hpa:
          enabled: true
          maxReplicas: 5
          utilization: 85
        limits:
          cpu: "2"
          memory: 8Gi
        replicas: 1
        requests:
          cpu: 300m
          memory: 2Gi
      webapp:
        enabled: true
        failureThreshold: 5
        hpa:
          enabled: true
          maxReplicas: 5
          utilization: 85
        initialDelaySeconds: 10
        limits:
          cpu: "4"
          memory: 8Gi
        nodePort: 30080
        oauthProxy:
          skipAuthRegex:
          - \/assets
          - \/healthz
          - \/public
          - \/pack
          - \/vscode.tar.gz
          - \/jupyter.vsix
          - \/gitlens.vsix
          - \/ms-python-release.vsix
          - \/webhooks
          - \/api/v2/metrics
          - \/api/v1/events/endpoint_rule_alert
          tokenValidationRegex:
          - ^\/api
        passengerMaxPoolSize: 50
        port: 8080
        readinessPeriodSeconds: 25
        readinessTimeoutSeconds: 20
        replicas: 1
        requests:
          cpu: 500m
          memory: 4Gi
        svcName: app
    cri: docker
    dbs:
      cvat:
        pg:
          backup:
            bucketRef: cp-object-storage
            credsRef: cvat-pg-secret
            period: 24h
            rotation: 5
          credsRef: cvat-pg-secret
          effectiveCacheSize: 2048MB
          hugePages:
            size: 2Mi
          image: postgresql-12-centos7:latest
          limits:
            cpu: "2"
            memory: 4Gi
          maxConnections: 500
          port: 5432
          pvcName: cvat-pg-storage
          requests:
            cpu: "1"
            memory: 2Gi
          serviceAccount: cvat-pg
          sharedBuffers: 1024MB
          storageSize: 100Gi
          svcName: cvat-postgres
        redis:
          backup: {}
          credsRef: cvat-redis-secret
          image: redis:4.0.5-alpine
          limits:
            cpu: 1000m
            memory: 2Gi
          port: 6379
          pvcName: cvat-redis-storage
          requests:
            cpu: 250m
            memory: 500Mi
          serviceAccount: cvat-redis
          storageSize: 10Gi
          svcName: cvat-redis
      es:
        cleanupPolicy:
          all: 3d
          app: 30d
          endpoints: 1825d
          jobs: 14d
        credsRef: es-creds
        enabled: true
        image: cnvrg-es:v7.8.1.a1-dynamic-indices
        javaOpts: -Xms2g -Xmx2g
        limits:
          cpu: "4"
          memory: 8Gi
        nodePort: 32200
        patchEsNodes: true
        port: 9200
        pvcName: es-storage
        replicas: 1
        requests:
          cpu: 500m
          memory: 4Gi
        serviceAccount: es
        storageSize: 10Gi
        svcName: elasticsearch
      minio:
        enabled: true
        image: minio:RELEASE.2021-05-22T02-34-39Z
        limits:
          cpu: "8"
          memory: 20Gi
        nodePort: 30090
        port: 9000
        pvcName: minio-storage
        replicas: 1
        requests:
          cpu: 200m
          memory: 2Gi
        serviceAccount: minio
        sharedStorage:
          consistentHash:
            key: httpQueryParameterName
            value: uploadId
        storageSize: 20Gi
        svcName: minio
      pg:
        backup:
          bucketRef: cp-object-storage
          credsRef: pg-creds
          enabled: true
          period: 24h
          rotation: 5
        credsRef: pg-creds
        effectiveCacheSize: 2048MB
        enabled: true
        hugePages:
          size: 2Mi
        image: postgresql-12-centos7:latest
        limits:
          cpu: "12"
          memory: 32Gi
        maxConnections: 500
        port: 5432
        pvcName: pg-storage
        requests:
          cpu: "1"
          memory: 4Gi
        serviceAccount: pg
        sharedBuffers: 1024MB
        storageSize: 20Gi
        svcName: postgres
      redis:
        backup: {}
        credsRef: redis-creds
        image: cnvrg-redis:v3.0.5.c2
        limits:
          cpu: 1000m
          memory: 2Gi
        port: 6379
        pvcName: redis-storage
        requests:
          cpu: 100m
          memory: 200Mi
        serviceAccount: redis
        storageSize: 10Gi
        svcName: redis
    imageHub: docker.io/cnvrg
    ingressCheck: {}
    labels:
      owner: cnvrg-control-plane
    logging:
      elastalert:
        authProxyImage: nginx:1.20
        credsRef: elastalert-creds
        image: elastalert:3.0.0-beta.1
        limits:
          cpu: 400m
          memory: 800Mi
        nodePort: 32030
        port: 80
        pvcName: elastalert-storage
        requests:
          cpu: 100m
          memory: 200Mi
        storageSize: 30Gi
        svcName: elastalert
      kibana:
        credsRef: kibana-creds
        enabled: true
        image: kibana-oss:7.8.1
        limits:
          cpu: 1000m
          memory: 2Gi
        nodePort: 30601
        oauthProxy: {}
        port: 8080
        requests:
          cpu: 100m
          memory: 200Mi
        serviceAccount: kibana
        svcName: kibana
    monitoring:
      cnvrgIdleMetricsExporter: {}
      grafana:
        credsRef: grafana-creds
        image: grafana:7.3.4
        nodePort: 30014
        oauthProxy:
          skipAuthRegex:
          - \/api\/health
        port: 8080
        svcName: grafana
      prometheus:
        basicAuthProxyImage: nginx:1.20
        credsRef: prom-creds
        image: prometheus:v2.22.1
        limits:
          cpu: "4"
          memory: 12Gi
        nodePort: 30909
        port: 9091
        replicas: 1
        requests:
          cpu: 200m
          memory: 500Mi
        retention: 8w
        storageSize: 50Gi
        svcName: prometheus
        upstreamRef: upstream-prom-static-config
    networking:
      eastWest:
        meshId: mesh1
        network: network1
      https: {}
      ingress:
        istioGwName: istio-gw-cnvrg
        perTryTimeout: 3600s
        retriesAttempts: 5
        timeout: 18000s
        type: ingress
      proxy:
        configRef: cp-proxy
    registry:
      name: cnvrg-app-registry
      password: abbb7835-fef8-42af-be0f-ef6750bde5a0
      url: docker.io
      user: cnvrghelm
    sso:
      cookieSecret: Tk6hlOCFkCJ561jV
      image: saas-oauth2-proxy:latest
    tenancy:
      key: purpose
      value: cnvrg-control-plane
  status:
    message: successfully reconciled, ready (100%)
    progress: 100
    stackReadiness:
      es: true
      kibana: true
      minio: true
      pg: true
      searchkiq: true
      sidekiq: true
      systemkiq: true
      webApp: true
    status: READY
kind: List
metadata:
  resourceVersion: ""
